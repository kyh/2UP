generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  userId String   @id @unique
  role   UserRole
  name   String?
  email  String?
  avatar String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum UserRole {
  admin
  user
}

model Pack {
  id          String  @id @default(cuid())
  name        String
  isRandom    Boolean @default(true)
  gameLength  Int     @default(10)
  imageUrl    String?
  description String?

  userId String

  assets      PackAsset[]
  tags        PackTag[]
  scenes      Scene[]
  gamesPlayed Game[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Scene {
  id                  String        @id @default(cuid())
  externalId          String?
  questionType        QuestionType
  question            String
  questionDescription String?
  answerType          AnswerType
  answers             SceneAnswer[]
  answerDescription   String?

  order Decimal? @db.Decimal

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model SceneAnswer {
  id        String  @id @default(cuid())
  content   String
  isCorrect Boolean @default(false)

  sceneId String
  scene   Scene  @relation(fields: [sceneId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PackAsset {
  id   String @id @default(cuid())
  name String
  url  String

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PackTag {
  id    String @id @default(cuid())
  name  String @unique
  packs Pack[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum QuestionType {
  text
  image
  video
  audio
  code
}

enum AnswerType {
  text
  multiText
}

model Game {
  id         String   @id @unique
  state      Json // Current game state (see gameStore.ts)
  gameScenes String[] // Generated pre-existing set of scenes for the game
  history    Json[] // Game play by play history

  isStarted  Boolean @default(false)
  isFinished Boolean @default(false)

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  players Player[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Player {
  userId String  @id @unique
  name   String?
  avatar String?

  Game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?
}
