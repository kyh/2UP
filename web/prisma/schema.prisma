generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pack {
  id          String  @id @default(cuid())
  name        String
  isRandom    Boolean
  gameLength  Int
  imageUrl    String?
  description String?

  userId String

  assets      PackAsset[]
  tags        PackTag[]
  scenes      Scene[]
  gamesPlayed Game[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Scene {
  id           String        @id @default(cuid())
  externalId   String?
  questionType QuestionType
  answerType   AnswerType
  question     String
  answers      SceneAnswer[]
  instruction  String?
  order        Decimal?      @db.Decimal

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model SceneAnswer {
  id        String  @id @default(cuid())
  content   String
  isCorrect Boolean @default(false)

  sceneId String
  scene   Scene  @relation(fields: [sceneId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PackAsset {
  id      String @id @default(cuid())
  rawName String
  url     String

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PackTag {
  id    String @id @default(cuid())
  name  String @unique
  packs Pack[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum QuestionType {
  text
  image
  video
  audio
  code
}

enum AnswerType {
  text
  multiText
}

model Game {
  id      String   @id @default(cuid())
  players String[] // User IDs
  state   Json // Game state

  packId     String
  pack       Pack     @relation(fields: [packId], references: [id])
  gameScenes String[] // Scene IDs

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
