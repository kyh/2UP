generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "nativeDistinct"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum UserRole {
  admin
  user
}

model User {
  id String @id @default(cuid())

  name                   String?
  username               String?   @unique
  email                  String    @unique
  emailVerified          DateTime?
  image                  String?
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  role                   UserRole  @default(user)

  players Player[]
  packs   Pack[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Pack {
  id          String  @id @default(cuid())
  name        String
  isRandom    Boolean @default(true)
  gameLength  Int     @default(10)
  imageUrl    String?
  description String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  assets      PackAsset[]
  tags        PackTag[]
  scenes      Scene[]
  gamesPlayed Game[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Scene {
  id         String  @id @default(cuid())
  externalId String?

  questionType        QuestionType
  question            String
  questionDescription String?

  answerType        AnswerType
  answers           SceneAnswer[]
  answerDescription String?

  order Decimal? @db.Decimal

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model SceneAnswer {
  id        String  @id @default(cuid())
  content   String
  isCorrect Boolean @default(false)

  sceneId String
  scene   Scene  @relation(fields: [sceneId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PackAsset {
  id   String @id @default(cuid())
  name String
  url  String

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model PackTag {
  id    String @id @default(cuid())
  name  String @unique
  packs Pack[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum QuestionType {
  text
  image
  video
  audio
  code
}

enum AnswerType {
  text
  multiText
}

model Game {
  id   String @id @default(cuid())
  code String

  scenes  Json[] // Generated pre-existing set of scenes for the game
  history Json[] // Game state play by play history

  isActive Boolean @default(false)

  packId String
  pack   Pack   @relation(fields: [packId], references: [id])

  players Player[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Player {
  name       String
  finalScore Int    @default(0)

  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  Game   Game   @relation(fields: [gameId], references: [id])
  gameId String
}

enum WaitlistType {
  account
}

model Waitlist {
  id   String       @id @default(cuid())
  type WaitlistType @default(account)
  data Json

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
