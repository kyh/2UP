schema {
  query: RootQueryType
  mutation: RootMutationType
}

type Act implements Node {
  answer: String
  answerType: AnswerType!

  """The ID of an object"""
  id: ID!
  instruction: String
  question: String!
  questionType: QuestionType!
}

type ActConnection {
  edges: [ActEdge]
  pageInfo: PageInfo!
}

input ActCreateInput {
  answer: String
  answerTypeId: ID
  instruction: String
  order: Int
  packId: ID
  question: String
  questionTypeId: ID
}

type ActCreatePayload {
  act: Act!
}

input ActDeleteInput {
  id: ID
  packId: ID
}

type ActDeletePayload {
  act: Act!
}

type ActEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Act
}

input ActUpdateInput {
  answer: String
  answerTypeId: ID
  id: ID
  instruction: String
  order: Int
  question: String
  questionTypeId: ID
}

type ActUpdatePayload {
  act: Act!
}

type AnswerType implements Node {
  """The ID of an object"""
  id: ID!
  slug: String!
}

input GameCreateInput {
  pack: String!
}

type GameCreatePayload {
  code: String!
}

input GameInput {
  code: String!
}

type GamePayload {
  isValid: Boolean!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Pack implements Node {
  acts(after: String, before: String, first: Int, last: Int): ActConnection
  description: String

  """The ID of an object"""
  id: ID!
  imageUrl: String
  name: String!
  user: User!
}

type PackConnection {
  edges: [PackEdge]
  pageInfo: PageInfo!
}

input PackCreateInput {
  name: String!
}

type PackCreatePayload {
  pack: Pack!
}

type PackEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Pack
}

type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type QuestionType implements Node {
  """The ID of an object"""
  id: ID!
  slug: String!
}

type RootMutationType {
  """Create new act and pack act"""
  actCreate(input: ActCreateInput!): ActCreatePayload

  """Delete act and pack act"""
  actDelete(input: ActDeleteInput!): ActDeletePayload

  """Update act"""
  actUpdate(input: ActUpdateInput!): ActUpdatePayload

  """Get info about live game"""
  game(input: GameInput!): GamePayload

  """Create new live game"""
  gameCreate(input: GameCreateInput!): GameCreatePayload

  """Create new pack"""
  packCreate(input: PackCreateInput!): PackCreatePayload

  """Sign in user"""
  sessionCreate(input: SessionCreateInput!): SessionCreatePayload

  """Create user"""
  userCreate(input: UserCreateInput!): UserCreatePayload
}

type RootQueryType {
  act(id: ID!): Act
  answerTypes: [AnswerType]
  currentUser: User
  pack(id: ID!): Pack
  packs(after: String, before: String, first: Int, last: Int): PackConnection
  questionTypes: [QuestionType]
}

input SessionCreateInput {
  password: String!
  username: String!
}

type SessionCreatePayload {
  token: String!
  user: User!
}

type User implements Node {
  email: String!

  """The ID of an object"""
  id: ID!
  username: String!
}

input UserCreateInput {
  email: String!
  password: String!
  username: String!
}

type UserCreatePayload {
  token: String!
  user: User!
}

