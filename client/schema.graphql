schema {
  query: RootQueryType
  mutation: RootMutationType
}

input GameCreateInput {
  pack: String!
}

type GameCreatePayload {
  code: String!
}

input GameInput {
  code: String!
}

type GamePayload {
  isValid: Boolean!
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

type Pack implements Node {
  """
  The ID of an object
  """
  id: ID!
  name: String!
  user: User
}

input PackCreateInput {
  name: String!
}

type PackCreatePayload {
  pack: Pack!
}

type Question {
  content: String!
  id: ID!
}

type RootMutationType {
  """
  Get info about live game
  """
  game(input: GameInput!): GamePayload

  """
  Create new live game
  """
  gameCreate(input: GameCreateInput!): GameCreatePayload

  """
  Create new pack
  """
  packCreate(input: PackCreateInput!): PackCreatePayload

  """
  Sign in user
  """
  sessionCreate(input: SessionCreateInput!): SessionCreatePayload

  """
  Create user
  """
  userCreate(input: UserCreateInput!): UserCreatePayload
}

type RootQueryType {
  answerTypes: [String]
  packs: [String]
  questionTypes: [String]

  """
  Get a list of questions
  """
  questions: [Question]
}

input SessionCreateInput {
  password: String!
  username: String!
}

type SessionCreatePayload {
  token: String!
  user: User!
}

type User {
  email: String!
  username: String!
}

input UserCreateInput {
  email: String!
  password: String!
  username: String!
}

type UserCreatePayload {
  token: String!
  user: User!
}
